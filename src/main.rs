use teloxide::dispatching::UpdateFilterExt;
use teloxide::dptree;
use teloxide::prelude::*;
use teloxide::types::{CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup};
#[tokio::main]
async fn main() {
    pretty_env_logger::init();
    log::info!("Starting bot...");

    let bot = Bot::from_env();

    let handler = dptree::entry()
        .branch(Update::filter_message().endpoint(message_handler))
        .branch(Update::filter_callback_query().endpoint(callback_handler));

    Dispatcher::builder(bot, handler)
        .enable_ctrlc_handler()
        .build()
        .dispatch()
        .await;
}

async fn message_handler(bot: Bot, msg: Message) -> ResponseResult<()> {
    if let Some(text) = msg.text() {
        match text {
            "/start" | "/menu" => {
                let keyboard = make_main_keyboard();
                bot.send_message(msg.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
                    .reply_markup(keyboard)
                    .await?;
            }
            "/info" => {
                let help_text = get_info_text();
                bot.send_message(msg.chat.id, help_text)
                    .parse_mode(teloxide::types::ParseMode::Html)
                    .await?;
            }
            _ => {
                bot.send_message(msg.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é")
                    .await?;
            }
        }
    }
    Ok(())
}

fn get_info_text() -> String {
    r#"
üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

üöÄ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
<code>/start</code> - Starts the trader.
<code>/stop</code> - Stops the trader.
<code>/stopentry</code> - Stop entering new trades.

üìà <b>–°—Ç–∞—Ç—É—Å –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>
<code>/status</code> [trade_id|table] - Lists all or specific open trades.
<code>/performance</code> - Show performance of each finished trade grouped by pair.
<code>/balance</code> - Show account balance per currency.

üí∞ <b>–ü—Ä–∏–±—ã–ª—å –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å:</b>
<code>/profit</code> [n] - Cumulative profit from all finished trades (last n days).
<code>/profit_long</code> [n] - Cumulative profit from long trades (last n days).
<code>/profit_short</code> [n] - Cumulative profit from short trades (last n days).
<code>/daily</code> [n] - Profit/loss per day (last n days).

‚ö° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏:</b>
<code>/forceexit</code> trade_id|all - Instantly exits trade (ignore minimum_roi).
<code>/fx</code> trade_id|all - Alias to /forceexit.

‚ùì <b>–°–ø—Ä–∞–≤–∫–∞:</b>
<code>/help</code> - Show help message.
<code>/version</code> - Show version.
<code>/info</code> - Show this info message.

üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º!</i>
    "#
    .trim()
    .to_string()
}

async fn callback_handler(bot: Bot, q: CallbackQuery) -> ResponseResult<()> {
    if let Some(data) = q.data {
        let chat_id = q.from.id;
        match data.as_str() {
            "info" => {
                let help_text = get_info_text();
                bot.send_message(chat_id, help_text)
                    .parse_mode(teloxide::types::ParseMode::Html)
                    .await?;
            }
            "status" => {
                bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ üìä")
                    .await?;
            }
            "profit" => {
                bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ üí∞")
                    .await?;
            }
            "trading" => {
                bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ ‚ö°")
                    .await?;
            }
            _ => {
                bot.send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ").await?;
            }
        }

        bot.answer_callback_query(q.id).await?;
    }
    Ok(())
}

fn make_main_keyboard() -> InlineKeyboardMarkup {
    let keyboard = vec![
        vec![
            InlineKeyboardButton::callback("üìä –°—Ç–∞—Ç—É—Å", "status"),
            InlineKeyboardButton::callback("üí∞ –ü—Ä–∏–±—ã–ª—å", "profit"),
        ],
        vec![
            InlineKeyboardButton::callback("‚ö° –¢–æ—Ä–≥–æ–≤–ª—è", "trading"),
            InlineKeyboardButton::callback("‚ùì –ü–æ–º–æ—â—å", "info"),
        ],
    ];

    InlineKeyboardMarkup::new(keyboard)
}
